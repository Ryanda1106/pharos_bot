const fs=require("fs"),path=require("path"),readline=require("readline"),chains=require("./chains"),{ethers:e}=require("ethers"),service=require("./service"),etc=chains.utils.etc,rl=readline.createInterface({input:process.stdin,output:process.stdout});function askQuestion(e){return new Promise(l=>rl.question(e,l))}async function selectWallets(l){console.log("Choose wallets to use:"),console.log("[ 0] All wallets");let t=Math.ceil(l.length/4),a=l.map((e,l)=>`[${(l+1).toString().padStart(2)}] ${e.name.padEnd(12)}`);for(let i=0;i<t;i++){let n="";for(let o=0;o<4;o++){let r=i+o*t;r<a.length&&(n+=a[r])}console.log(n)}console.log("");let s=(await askQuestion("Enter wallet numbers for multiple (comma-separated, e.g., 1,2 or 0 for all): ")).split(",").map(e=>parseInt(e.trim())).filter(e=>!isNaN(e)&&e>=0&&e<=l.length);if(0===s.length)return console.log("Invalid input. Using first wallet."),[l[0]];let c=s.includes(0)?l:s.map(e=>l[e-1]),u=[];for(let d of c)try{new e.Wallet(d.privatekey),u.push(d)}catch(m){console.error(`[${etc.timelog()}] Wallet "${d.name}" has invalid private key. Skipping.`)}return 0===u.length&&(console.error(`[${etc.timelog()}] No valid wallets found. Exiting.`),process.exit(1)),u}async function askMaxTransaction(){let e=await askQuestion("Enter the number of max transaction (default 1 if empty or 0): "),l=parseInt(e);return console.log(""),isNaN(l)||l<=0?1:l}async function selectMenu(){let e={1:{label:"Swap PHRS â†’ USDC",method:service.performSwapUSDC},2:{label:"Swap PHRS â†’ USDT",method:service.performSwapUSDT},3:{label:"Add Liquidity PHRS â†’ USDC",method:service.addLpUSDC},4:{label:"Add Liquidity PHRS â†’ USDT",method:service.addLpUSDT},5:{label:"Transfer to Random Address",method:service.randomTransfer},6:{label:"Checkin",method:service.accountCheckIn},7:{label:"Check Profile Stats",method:service.accountCheck},8:{label:"Claim Faucet USDC",method:service.claimFaucetUSDC},9:{label:"Claim Faucet PHRS",method:service.accountClaimFaucet},10:{label:"Social Task (Need connect X/DC and Join Server First)",method:service.socialTask},0:{label:"All",method:null}},l=Object.entries(e).filter(([e])=>"0"!==e),t=Math.ceil(l.length/2),a=l.map(([e,l])=>`[${e}] ${l.label.padEnd(30)}`);console.log(""),console.log("Select the menu type:"),console.log("[0] All of menu");for(let i=0;i<t;i++){let n="";for(let o=0;o<2;o++){let r=i+o*t;r<a.length&&(n+=a[r])}console.log(n)}console.log("");let s=await askQuestion("Enter menu numbers for multiple (comma-separated, e.g., 1,2,3 or 0 for all): ");console.log("");let c=Object.keys(e).map(Number),u=s.split(",").map(e=>parseInt(e.trim())).filter(e=>!isNaN(e)&&c.includes(e));0===u.length&&(console.log("Invalid input. Using default (Check Profile Stats)."),u=[7]),u.includes(0)&&(u=c.filter(e=>0!==e));let d=u.map(l=>e[l]).filter(Boolean);return console.log("You selected the following menu types:"),d.forEach(e=>console.log(`- ${e.label}`)),console.log(""),d}async function runPharos(){etc.header();let e=JSON.parse(fs.readFileSync(path.join(__dirname,"./wallet.json"),"utf8")),l=e.wallets,t=await selectWallets(l);global.selectedWallets=t,await service.accountLogin();let a=await selectMenu(),i=a.some(e=>"Checkin"!==e.label&&"Check Profile Stats"!==e.label&&"Claim Faucet USDC"!==e.label&&"Social Task (Need connect X/DC and Join Server First)"!==e.label&&"Claim Faucet PHRS"!==e.label);if(i){let n=await askMaxTransaction();global.maxTransaction=n}else global.maxTransaction=1;for(let o of(rl.close(),await etc.loading("Processing all of your choice, wait a sec...",6e3),console.log(""),a)){console.log(`ðŸ§¾ Executing your selected menu: ${o.label}`);try{await o.method()}catch(r){console.error(`${etc.timelog()} | Error in ${o.label}: ${r.message}`)}console.log("")}}runPharos();